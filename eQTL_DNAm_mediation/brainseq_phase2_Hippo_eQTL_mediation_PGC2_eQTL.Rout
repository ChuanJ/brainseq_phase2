
R version 3.4.3 Patched (2018-01-20 r74142) -- "Kite-Eating Tree"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Using the following user library: ~/R/x86_64-pc-linux-gnu-library/3.4.x
> #qsub -l bluejay,mf=150G,h_vmem=150G,h_fsize=200G,h_stack=256M -cwd -b y -M stephensemick@gmail.com -o log -e log R CMD BATCH --no-save brainseq_phase2_Hippo_eQTL_mediation_PGC2_eQTL.R
> 
> ### libraries
> library(SummarizedExperiment)
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians


Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following object is masked from ‘package:base’:

    apply

> library(jaffelab)
Loading required package: rafalib
> library(MatrixEQTL)
> library(sva)
Loading required package: mgcv
Loading required package: nlme

Attaching package: ‘nlme’

The following object is masked from ‘package:IRanges’:

    collapse

This is mgcv 1.8-22. For overview type 'help("mgcv-package")'.
Loading required package: genefilter

Attaching package: ‘genefilter’

The following objects are masked from ‘package:matrixStats’:

    rowSds, rowVars

Loading required package: BiocParallel
> 
> ######################
> ### load data ####
> ######################
> 
> load("/dcl01/lieber/ajaffe/lab/brainseq_phase2/expr_cutoff/rse_gene.Rdata")
> load("/dcl01/lieber/ajaffe/lab/brainseq_phase2/expr_cutoff/rse_exon.Rdata")
> load("/dcl01/lieber/ajaffe/lab/brainseq_phase2/expr_cutoff/rse_jxn.Rdata")
> load("/dcl01/lieber/ajaffe/lab/brainseq_phase2/expr_cutoff/rse_tx.Rdata")
> 
> # # fix junction row names
> # rownames(rse_jxn) = paste0(seqnames(rse_jxn),":",start(rse_jxn),"-",end(rse_jxn),"(",strand(rse_jxn),")")
> 
> # # sum totalMapped IntegerLists (so getRPKM works later)
> # colData(rse_tx)$totalMapped =
> 	# colData(rse_jxn)$totalMapped =
> 	# colData(rse_exon)$totalMapped = 
> 	# colData(rse_gene)$totalMapped  = sapply(colData(rse_gene)$totalMapped, sum)
> 
> ## keep adult samples & correct region
> keepInd = which(colData(rse_gene)$Age > 13 & colData(rse_gene)$Region == "HIPPO")
> rse_gene = rse_gene[,keepInd]
> rse_exon = rse_exon[,keepInd]
> rse_jxn = rse_jxn[,keepInd]
> rse_tx = rse_tx[,keepInd]
> 
> ## extract pd and rpkms
> pd = colData(rse_gene)
> geneRpkm = assays(rse_gene)$rpkm
> exonRpkm = assays(rse_exon)$rpkm
> jxnRp10m = assays(rse_jxn)$rp10m
> txTpm = assays(rse_tx)$tpm
> 
> 
> ######################
> ### snp data ####
> ######################
> 
> ## load SNP data
> load("../genotype_data/BrainSeq_Phase2_RiboZero_Genotypes_n551.rda")
> 
> ### make mds and snp dimensions equal to N
> ###(repeat rows or columns for BrNum replicates)
> mds = mds[pd$BrNum,]
> snp = snp[,pd$BrNum]
> rownames(mds) = colnames(snp) = pd$RNum
> 
> 
> ## drop SNPs not mapping to hg38
> keepIndex = which(!is.na(snpMap$chr_hg38))
> snpMap = snpMap[keepIndex,]
> snp = snp[keepIndex,]
> 
> 
> ## subset to PGC2 SNPs of interest 
> load('/dcl01/lieber/ajaffe/lab/brainseq_phase2/eQTL_DNAm_mediation/PGC2_theSnps_full.rda')
> keep_PGC_SNP_index = which(paste0('chr',snpMap$CHR,':',snpMap$POS) %in% theSnps$chrpos)
> snpMap = snpMap[keep_PGC_SNP_index,]
> snp = snp[keep_PGC_SNP_index,]
> 
> length(keep_PGC_SNP_index)
[1] 89469
> #[1] 89469
> 
> ######################
> # statistical model ##
> ######################
> 
> pd$Dx = factor(pd$Dx,
+ 	levels = c("Control", "Schizo"))
> 
> mod = model.matrix(~Dx + Sex + as.matrix(mds[,1:5]),
+ 	data = pd)
> colnames(mod)[4:8] = colnames(mds)[1:5]
> 
> 
> ######################
> # create SNP objects #
> ######################
> 
> theSnps = SlicedData$new(as.matrix(snp))
> theSnps$ResliceCombined(sliceSize = 50000)
> 
> snpspos = snpMap[,c("SNP","chr_hg38","pos_hg38")]
> colnames(snpspos) = c("name","chr","pos")
> 
> 
> #######################
> ####### do PCA ########
> #######################
> 
> #pcaGene = prcomp(t(log2(geneRpkm+1)))
> #kGene = num.sv(log2(geneRpkm+1), mod)
> #genePCs = pcaGene$x[,1:kGene]
> #
> #pcaExon = prcomp(t(log2(exonRpkm+1)))
> #kExon = num.sv(log2(exonRpkm+1), mod, vfilter=50000)
> #exonPCs = pcaExon$x[,1:kExon]
> #
> #pcaJxn = prcomp(t(log2(jxnRp10m+1)))
> #kJxn = num.sv(log2(jxnRp10m+1), mod, vfilter=50000)
> #jxnPCs = pcaJxn$x[,1:kJxn]
> #
> #pcaTx = prcomp(t(log2(txTpm+1)))
> #kTx = num.sv(log2(txTpm+1), mod, vfilter=50000)
> #txPCs = pcaTx$x[,1:kTx]
> 
> #save(genePCs, exonPCs, jxnPCs, txPCs, 
> #	file="rdas/pcs_hippo_4features_filtered_over13.rda")
> load("../rdas/pcs_hippo_4features_filtered_over13.rda")
> 
> covsGene = SlicedData$new(t(cbind(mod[,-1],genePCs)))
> covsExon = SlicedData$new(t(cbind(mod[,-1],exonPCs)))
> covsJxn = SlicedData$new(t(cbind(mod[,-1],jxnPCs)))
> covsTx = SlicedData$new(t(cbind(mod[,-1],txPCs)))
> 
> ##########################
> ### feature annotation ###
> ##########################
> 
> ###### gene level
> posGene = as.data.frame(rowRanges(rse_gene))[,1:3]
> posGene$name = rownames(posGene)
> posGene = posGene[,c(4,1:3)]
> 
> ##### exon level 
> posExon = as.data.frame(rowRanges(rse_exon))[,1:3]
> posExon$name = rownames(posExon)
> posExon = posExon[,c(4,1:3)]
> 
> ##### junction level 
> posJxn = as.data.frame(rowRanges(rse_jxn))[,1:3]
> posJxn$name = rownames(posJxn)
> posJxn = posJxn[,c(4,1:3)]
> names(posJxn)[2:4] = c("Chr", "Start","End")
> 
> ##### transcript level 
> posTx = as.data.frame(rowRanges(rse_tx))[,1:3]
> posTx$name = rownames(posTx)
> posTx = posTx[,c(4,1:3)]
> names(posTx)[2:4] = c("Chr", "Start","End")
> 
> 
> #############################
> ### sliced expression data ##
> geneSlice = SlicedData$new(log2(geneRpkm+1))
> exonSlice = SlicedData$new(log2(exonRpkm+1))
> jxnSlice = SlicedData$new(log2(jxnRp10m+1))
> txSlice = SlicedData$new(log2(txTpm+1))
> 
> geneSlice$ResliceCombined(sliceSize = 5000)
> exonSlice$ResliceCombined(sliceSize = 5000)
> jxnSlice$ResliceCombined(sliceSize = 5000)
> txSlice$ResliceCombined(sliceSize = 5000)
> 
> 
> ##########################
> ### Run EQTLs ############
> ##########################
> print("Begin eQTL analysis")
[1] "Begin eQTL analysis"
> 
> meGene = Matrix_eQTL_main(snps=theSnps, gene = geneSlice, 
+ 	cvrt = covsGene, output_file_name.cis =  ".ctxt" ,
+ 	pvOutputThreshold.cis = 1,  pvOutputThreshold=0,
+ 	snpspos = snpspos, genepos = posGene, 
+ 	useModel = modelLINEAR,	cisDist=5e5,
+ 	pvalue.hist = 100,min.pv.by.genesnp = TRUE)	
Matching data files and location files
24652of24652 genes matched
89469of89469 SNPs matched

Task finished in 0.06899999999996 seconds
Reordering SNPs

Task finished in 6.01400000000001 seconds
Reordering genes

Task finished in 2.21799999999996 seconds
Processing covariates
Task finished in 0.00499999999999545 seconds
Processing gene expression data (imputation, residualization)
Task finished in 1.14700000000005 seconds
Creating output file(s)
Task finished in 0.124000000000024 seconds
Performing eQTL analysis
 9.99% done, 229,905 cis-eQTLs
19.99% done, 409,454 cis-eQTLs
30.00% done, 419,558 cis-eQTLs
80.00% done, 581,484 cis-eQTLs
89.99% done, 817,694 cis-eQTLs
100.00% done, 926,675 cis-eQTLs
Task finished in 653.281 seconds

> 
> meExon = Matrix_eQTL_main(snps=theSnps, gene = exonSlice, 
+ 	cvrt = covsExon, output_file_name.cis =  ".ctxt" ,
+ 	pvOutputThreshold.cis = 1,  pvOutputThreshold=0,
+ 	snpspos = snpspos, genepos = posExon, 
+ 	useModel = modelLINEAR,	cisDist=5e5,
+ 	pvalue.hist = 100,min.pv.by.genesnp = TRUE)	
Matching data files and location files
396583of396583 genes matched
89469of89469 SNPs matched

Task finished in 0.219000000000051 seconds
Reordering genes

Task finished in 13.2839999999999 seconds
Processing covariates
Task finished in 0.00500000000010914 seconds
Processing gene expression data (imputation, residualization)
Task finished in 20.0059999999999 seconds
Creating output file(s)
Task finished in 0.105999999999995 seconds
Performing eQTL analysis
 0.62% done, 86,036 cis-eQTLs
 1.24% done, 342,139 cis-eQTLs
 1.87% done, 634,532 cis-eQTLs
 2.50% done, 784,282 cis-eQTLs
 3.12% done, 1,220,633 cis-eQTLs
 3.74% done, 1,373,225 cis-eQTLs
 4.37% done, 1,495,878 cis-eQTLs
 5.00% done, 1,981,562 cis-eQTLs
 5.62% done, 2,257,371 cis-eQTLs
 6.25% done, 2,382,930 cis-eQTLs
 6.87% done, 2,539,544 cis-eQTLs
 7.49% done, 2,783,950 cis-eQTLs
 8.12% done, 2,935,005 cis-eQTLs
 8.75% done, 3,137,210 cis-eQTLs
 9.37% done, 3,272,187 cis-eQTLs
 9.99% done, 3,803,424 cis-eQTLs
10.62% done, 3,987,862 cis-eQTLs
11.25% done, 4,118,149 cis-eQTLs
11.87% done, 4,162,809 cis-eQTLs
12.50% done, 4,330,321 cis-eQTLs
13.12% done, 4,463,707 cis-eQTLs
13.74% done, 4,582,736 cis-eQTLs
14.37% done, 4,679,235 cis-eQTLs
15.00% done, 5,130,003 cis-eQTLs
15.62% done, 5,238,202 cis-eQTLs
16.24% done, 5,418,070 cis-eQTLs
16.87% done, 5,745,729 cis-eQTLs
17.50% done, 5,875,859 cis-eQTLs
18.12% done, 6,071,640 cis-eQTLs
18.75% done, 6,170,055 cis-eQTLs
19.37% done, 6,370,493 cis-eQTLs
19.99% done, 6,464,420 cis-eQTLs
20.62% done, 6,545,651 cis-eQTLs
70.62% done, 6,789,414 cis-eQTLs
71.24% done, 6,831,406 cis-eQTLs
71.87% done, 6,955,145 cis-eQTLs
72.50% done, 7,077,215 cis-eQTLs
73.12% done, 7,178,358 cis-eQTLs
73.75% done, 7,233,757 cis-eQTLs
74.37% done, 7,335,779 cis-eQTLs
75.00% done, 7,455,144 cis-eQTLs
75.62% done, 7,691,779 cis-eQTLs
76.25% done, 7,786,872 cis-eQTLs
76.87% done, 8,169,782 cis-eQTLs
77.49% done, 8,329,684 cis-eQTLs
78.12% done, 8,561,945 cis-eQTLs
78.75% done, 8,807,366 cis-eQTLs
79.37% done, 8,860,905 cis-eQTLs
80.00% done, 9,024,267 cis-eQTLs
80.62% done, 9,172,432 cis-eQTLs
81.25% done, 9,652,491 cis-eQTLs
81.87% done, 9,767,191 cis-eQTLs
82.50% done, 9,837,727 cis-eQTLs
83.12% done, 10,117,523 cis-eQTLs
83.74% done, 10,265,096 cis-eQTLs
84.37% done, 10,534,876 cis-eQTLs
85.00% done, 10,827,505 cis-eQTLs
85.62% done, 11,101,687 cis-eQTLs
86.25% done, 11,290,979 cis-eQTLs
86.87% done, 11,438,463 cis-eQTLs
87.50% done, 11,601,469 cis-eQTLs
88.12% done, 11,983,481 cis-eQTLs
88.75% done, 12,459,413 cis-eQTLs
89.37% done, 12,779,864 cis-eQTLs
89.99% done, 12,863,521 cis-eQTLs
90.62% done, 13,251,967 cis-eQTLs
91.25% done, 13,287,827 cis-eQTLs
91.87% done, 13,441,530 cis-eQTLs
92.50% done, 13,624,753 cis-eQTLs
93.12% done, 13,660,528 cis-eQTLs
93.75% done, 13,697,804 cis-eQTLs
94.37% done, 14,017,073 cis-eQTLs
95.00% done, 14,074,383 cis-eQTLs
95.62% done, 14,126,413 cis-eQTLs
96.24% done, 14,247,123 cis-eQTLs
96.87% done, 14,391,018 cis-eQTLs
97.50% done, 14,527,931 cis-eQTLs
98.12% done, 15,004,165 cis-eQTLs
Task finished in 8273.036 seconds

> 
> meJxn = Matrix_eQTL_main(snps=theSnps, gene = jxnSlice, 
+ 	cvrt = covsJxn, output_file_name.cis =  ".ctxt" ,
+ 	pvOutputThreshold.cis = 1,  pvOutputThreshold=0,
+ 	snpspos = snpspos, genepos = posJxn, 
+ 	useModel = modelLINEAR,	cisDist=5e5,
+ 	pvalue.hist = 100,min.pv.by.genesnp = TRUE)	
Matching data files and location files
297181of297181 genes matched
89469of89469 SNPs matched

Task finished in 0.171000000000276 seconds
Reordering genes

Task finished in 9.71999999999935 seconds
Processing covariates
Task finished in 0.00400000000081491 seconds
Processing gene expression data (imputation, residualization)
Task finished in 15.0779999999995 seconds
Creating output file(s)
Task finished in 1.51900000000023 seconds
Performing eQTL analysis
 0.83% done, 88,337 cis-eQTLs
 1.66% done, 434,643 cis-eQTLs
 2.50% done, 583,110 cis-eQTLs
 3.33% done, 849,658 cis-eQTLs
 4.16% done, 1,049,323 cis-eQTLs
 5.00% done, 1,376,656 cis-eQTLs
 5.83% done, 1,655,565 cis-eQTLs
 6.66% done, 1,786,489 cis-eQTLs
 7.49% done, 1,919,248 cis-eQTLs
 8.33% done, 2,175,949 cis-eQTLs
 9.16% done, 2,333,466 cis-eQTLs
 9.99% done, 2,753,848 cis-eQTLs
10.83% done, 2,921,734 cis-eQTLs
11.66% done, 2,991,236 cis-eQTLs
12.50% done, 3,131,040 cis-eQTLs
13.33% done, 3,266,715 cis-eQTLs
14.16% done, 3,383,144 cis-eQTLs
15.00% done, 3,699,727 cis-eQTLs
15.83% done, 3,833,537 cis-eQTLs
16.66% done, 4,009,684 cis-eQTLs
17.50% done, 4,281,224 cis-eQTLs
18.33% done, 4,414,566 cis-eQTLs
19.16% done, 4,544,732 cis-eQTLs
19.99% done, 4,685,336 cis-eQTLs
20.83% done, 4,803,525 cis-eQTLs
70.83% done, 4,984,490 cis-eQTLs
71.66% done, 5,060,569 cis-eQTLs
72.50% done, 5,207,018 cis-eQTLs
73.33% done, 5,294,961 cis-eQTLs
74.16% done, 5,343,429 cis-eQTLs
75.00% done, 5,441,996 cis-eQTLs
75.83% done, 5,721,571 cis-eQTLs
76.66% done, 5,885,472 cis-eQTLs
77.49% done, 6,085,098 cis-eQTLs
78.33% done, 6,384,199 cis-eQTLs
79.16% done, 6,459,253 cis-eQTLs
80.00% done, 6,606,407 cis-eQTLs
80.83% done, 6,973,795 cis-eQTLs
81.66% done, 7,058,688 cis-eQTLs
82.50% done, 7,219,951 cis-eQTLs
83.33% done, 7,389,121 cis-eQTLs
84.16% done, 7,601,096 cis-eQTLs
85.00% done, 7,831,222 cis-eQTLs
85.83% done, 8,134,667 cis-eQTLs
86.66% done, 8,304,648 cis-eQTLs
87.50% done, 8,634,594 cis-eQTLs
88.33% done, 8,943,963 cis-eQTLs
89.16% done, 9,280,798 cis-eQTLs
89.99% done, 9,376,473 cis-eQTLs
90.83% done, 9,514,972 cis-eQTLs
91.66% done, 9,546,606 cis-eQTLs
92.50% done, 9,721,075 cis-eQTLs
93.33% done, 9,775,056 cis-eQTLs
94.16% done, 9,930,950 cis-eQTLs
95.00% done, 9,977,256 cis-eQTLs
95.83% done, 10,162,899 cis-eQTLs
96.66% done, 10,384,757 cis-eQTLs
Task finished in 6089.882 seconds

> 
> meTx = Matrix_eQTL_main(snps=theSnps, gene = txSlice, 
+ 	cvrt = covsTx, output_file_name.cis =  ".ctxt" ,
+ 	pvOutputThreshold.cis = 1,  pvOutputThreshold=0,
+ 	snpspos = snpspos, genepos = posTx, 
+ 	useModel = modelLINEAR,	cisDist=5e5,
+ 	pvalue.hist = 100,min.pv.by.genesnp = TRUE)	
Matching data files and location files
92732of92732 genes matched
89469of89469 SNPs matched

Task finished in 0.0799999999999272 seconds
Reordering genes

Task finished in 4.33500000000095 seconds
Processing covariates
Task finished in 0.00399999999899592 seconds
Processing gene expression data (imputation, residualization)
Task finished in 4.54300000000148 seconds
Creating output file(s)
Task finished in 1.33299999999872 seconds
Performing eQTL analysis
 2.63% done, 246,549 cis-eQTLs
 5.26% done, 506,459 cis-eQTLs
 7.89% done, 705,737 cis-eQTLs
10.52% done, 949,296 cis-eQTLs
13.15% done, 1,062,410 cis-eQTLs
15.78% done, 1,290,641 cis-eQTLs
18.42% done, 1,515,665 cis-eQTLs
21.05% done, 1,633,535 cis-eQTLs
71.05% done, 1,718,911 cis-eQTLs
73.68% done, 1,820,354 cis-eQTLs
76.31% done, 1,960,298 cis-eQTLs
78.94% done, 2,197,812 cis-eQTLs
81.57% done, 2,409,927 cis-eQTLs
84.21% done, 2,617,390 cis-eQTLs
86.84% done, 2,852,653 cis-eQTLs
89.47% done, 3,158,044 cis-eQTLs
92.10% done, 3,376,947 cis-eQTLs
94.73% done, 3,472,334 cis-eQTLs
97.36% done, 3,678,164 cis-eQTLs
100.00% done, 3,681,004 cis-eQTLs
Task finished in 2068.88 seconds

> 
> save(meGene, meExon, meJxn, meTx,
+ 	file="PGC2_eqtl/PGC2_cis_raw_output_hippo_4features.rda")
> 	
> ######################
> ###### annotate ######
> 
> # load("eqtl_tables/matrixEqtl_output_hippo_4features.rda")
> # load("count_data/hippo_ribozero_brainseq_phase2_hg38_rseTx_merged_n449.rda")
> # load("count_data/hippo_ribozero_brainseq_phase2_hg38_rseJxn_merged_n449.rda")
> # load("count_data/hippo_ribozero_brainseq_phase2_hg38_rseExon_merged_n449.rda")
> # load("count_data/hippo_ribozero_brainseq_phase2_hg38_rseGene_merged_n449.rda")
> 
> # extract
> geneEqtl = meGene$cis$eqtls
> geneEqtl$gene = as.character(geneEqtl$gene)
> geneEqtl$snps = as.character(geneEqtl$snps)
> 
> exonEqtl = meExon$cis$eqtls
> exonEqtl$gene = as.character(exonEqtl$gene)
> exonEqtl$snps = as.character(exonEqtl$snps)
> 
> jxnEqtl = meJxn$cis$eqtls
> jxnEqtl$gene = as.character(jxnEqtl$gene)
> jxnEqtl$snps = as.character(jxnEqtl$snps)
> 
> txEqtl = meTx$cis$eqtls
> txEqtl$gene = as.character(txEqtl$gene)
> txEqtl$snps = as.character(txEqtl$snps)
> 
> ################################
> # add gene annotation info #####
> ################################
> 
> geneEqtl$Symbol = rowRanges(rse_gene)$Symbol[match(geneEqtl$gene, rownames(rse_gene))]
> geneEqtl$EnsemblGeneID = rowRanges(rse_gene)$ensemblID[match(geneEqtl$gene, rownames(rse_gene))]
> geneEqtl$Type = "Gene"
> geneEqtl$Class = "InGen"
> geneEqtl = DataFrame(geneEqtl)
> # geneEqtl$gene_type = rowRanges(rse_gene)$gene_type[match(geneEqtl$gene, rownames(rse_gene))]
> 
> exonEqtl$Symbol = rowRanges(rse_exon)$Symbol[match(exonEqtl$gene, rownames(rse_exon))]
> exonEqtl$EnsemblGeneID = rowRanges(rse_exon)$ensemblID[match(exonEqtl$gene, rownames(rse_exon))]
> exonEqtl$Type = "Exon"
> exonEqtl$Class = "InGen"
> exonEqtl = DataFrame(exonEqtl)
> # exonEqtl$gene_type = rowRanges(rse_exon)$gene_type[match(exonEqtl$gene, rownames(rse_exon))]
> 
> jxnEqtl$Symbol = rowRanges(rse_jxn)$newGeneSymbol[match(jxnEqtl$gene, rownames(rse_jxn))]
> jxnEqtl$EnsemblGeneID = rowRanges(rse_jxn)$newGeneID[match(jxnEqtl$gene, rownames(rse_jxn))]
> jxnEqtl$Type = "Jxn"
> jxnEqtl$Class = rowRanges(rse_jxn)$Class[match(jxnEqtl$gene, rownames(rse_jxn))]
> jxnEqtl = DataFrame(jxnEqtl)
> # jxnEqtl$gene_type = rowRanges(rse_jxn)$gene_type[match(jxnEqtl$gene, rownames(rse_jxn))]
> 
> txEqtl$Symbol = rowRanges(rse_tx)$gene_name[match(txEqtl$gene, rownames(rse_tx))]
> txEqtl$EnsemblGeneID = ss(rowRanges(rse_tx)$gene_id[match(txEqtl$gene, rownames(rse_tx))],"\\.",1)
> txEqtl$Type = "Tx"
> txEqtl$Class = "InGen"
> txEqtl = DataFrame(txEqtl)
> # txEqtl$gene_type = rowRanges(rse_tx)$gene_type[match(txEqtl$gene, rownames(rse_tx))]
> 
> 
> # merge
> allEqtl = rbind(geneEqtl, exonEqtl, jxnEqtl, txEqtl)
> allEqtl$gencodeTx = CharacterList(c(as.list(rowRanges(rse_gene)$gencodeTx[match(geneEqtl$gene, 
+ 	rownames(rse_gene))]),
+ 	as.list(rowRanges(rse_exon)$gencodeTx[match(exonEqtl$gene, rownames(rse_exon))]),
+ 	as.list(rowRanges(rse_jxn)$gencodeTx[match(jxnEqtl$gene, rownames(rse_jxn))]),
+ 	as.list(txEqtl$gene)))
> save(allEqtl, file="PGC2_eqtl/PGC2_cis_mergedEqtl_output_hippo_4features.rda",compress=TRUE)
> 
> 
> # #############
> # # metrics ###
> # sigEqtl = allEqtl[allEqtl$FDR < 0.01,] # fdr significant
> # length(unique(sigEqtl$EnsemblGeneID))
> 
> # sigEqtlList = split(sigEqtl, factor(sigEqtl$Type,
> 	# levels=c("Gene","Exon","Jxn", "Tx")))
> 
> # sapply(sigEqtlList, function(x) max(x$pvalue))
> 
> # sapply(sigEqtlList, function(x) length(unique(x$EnsemblGeneID)))
> # sapply(sigEqtlList, function(x) length(unique(x$Symbol)))
> # sapply(sigEqtlList, function(x) length(unique(x$snps)))
> 
> # sapply(sigEqtlList, function(x) quantile(abs(x$beta)))
> 
> # sapply(sigEqtlList, function(x) table(x$Class[!duplicated(x$gene)]))
> # sapply(sigEqtlList, function(x) prop.table(table(x$Class)))
> 
> proc.time()
     user    system   elapsed 
19084.034   265.515 19352.229 
